[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "website-base",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 15, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nFeb 12, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/parameterized-rmd/index.html",
    "href": "posts/parameterized-rmd/index.html",
    "title": "Parameterized RMarkdown is Amazing",
    "section": "",
    "text": "A while back, I learned that you can parameterize markdown. You can send it something to process as argument. This is amazing. Let me show an example.\nFirst, I want to build a quarto markdown file. In RStudio, that is File > New file > Quarto document. The following is what it looks like to do this with an .RMarkdown document.\n\n\nWe will need to add a bit of metadata to the top. The key component is the params: argument. I want to pass a ticker with a default option.\n\nNow, let’s build up an example.\n\n\n\n\n\n\nYAML\n\n\nI want to load a few libraries.\n\n\nCode\nlibrary(tidyquant)\nlibrary(ggplot2)\nlibrary(fpp3)\n\n\nWithout loading anything else, this markdown is aware of what I passed it in params$ticker. But tidyquant can make use of tickers and retrieve market OHLC data. So let me proxy that behavior with Goldman Sachs as the example.\n\n\nCode\nparams <- NULL\nparams$ticker <- \"GS\"\n\n\nNow my environment looks the same. Let me use tq_get to get the data.\n\n\nCode\ndat <- tq_get(params$ticker)\n\n\nNow I want to use a special geometry for OHLC data. I will also give it a title that deploys the ticker and use the special theme.\n\n\nCode\ndat %>% ggplot(aes(x = date, y = close)) +\n    geom_barchart(aes(open = open, high = high, low = low, close = close)) +\n    labs(title = paste(params$ticker,\"Bar Chart\"), y = \"Closing Price\", x = \"\") + \n    theme_tq()\n\n\n\n\n\nLet’s look at a smooth with a simple 50 day moving average.\n\n\nCode\ndat %>%\n    ggplot(aes(x = date, y = close)) +\n    geom_line() +           # Plot stock price\n    geom_bbands(aes(high = high, low = low, close = close), ma_fun = SMA, n = 50)\n\n\n\n\n\nWe can also invoke tidyquant functions of the data, like returns or more complicated financial quantities.\n\n\nCode\ndat %>% tq_transmute(select= adjusted, \n                 mutate_fun = periodReturn, \n                 period     = \"daily\", \n                 col_rename = \"Ra\") %>% \n  as_tsibble(index=date) %>% \n  autoplot()\n\n\n\n\n\n\n\n\nThe following are a few quick interactive plots.\n\n\nCode\nlibrary(tidyquant)\nlibrary(tidyverse)\nlibrary(magrittr)\n# Use tidyquant to get the data\n# Slice off the most recent 120 days\ndat.tail <- tail(dat, 120)\ndat.tail %<>% mutate(\n    open = round(open, digits=2),\n    close = round(close, digits=2),\n    high = round(high, digits=2),\n    low = round(low, digits=2),\n    adjusted = round(adjusted, digits=2)\n    )\nlibrary(DT)\ndatatable(dat.tail)\n\n\n\n\n\n\n\n\n\n\nThere are a few charts specifically designed for OHLC data that are included in plotly. Here I want to deploy a basic one with one modification. I want daily increases in black and daily decreases in red.\n\n\nCode\nlibrary(plotly)\n# basic example of ohlc charts\n# custom colors\ni <- list(line = list(color = '#000000')) # black\nd <- list(line = list(color = '#FF0000')) # red\n# Create the figure\nfig.2 <- dat.tail %>%\n  plot_ly(x = ~date, type=\"ohlc\",\n          open = ~open, close = ~close,\n          high = ~high, low = ~low,\n          increasing = i, decreasing = d)\nfig.2\n\n\n\n\n\n\nAfter I have the model report written, I can save the file and stop. The key is to note the file name and the full path. I will store mine in whatever my current working directory is. I want two more libraries; I need the rmarkdown library to render the file and I need the purrr library to map my tickers into render. I created a little function for this called Equity.Analyser to simplify my use of map. tidyquant has a function for acquiring all of the basic data on members of an index or exchange. I want to choose the S and P 400 and then generate a report for each one. The one trick is that I need a simple vector to pass to map so I unlist the column. This produced nearly 370 little reports in about 10 minutes.\nlibrary(quarto)\nlibrary(purrr)\nEquity.Analyser <- function(x) {\n  quarto_render(\"TQ-Parameters.qmd\", params = list(ticker = x), output_file = paste0(x,\"-TQ-Parameters.html\"))\n}\nSP400 <- tq_index(\"SP400\") \nSP400 %>% select(symbol) %>% unlist() %>% map(., Equity.Analyser)"
  },
  {
    "objectID": "posts/parameterized-rmd/TQ-Parameters.html",
    "href": "posts/parameterized-rmd/TQ-Parameters.html",
    "title": "Visualizing Equities with knitr Parameters",
    "section": "",
    "text": "The tidyquant package provides tools and data for visualizing and analysing equities. Here is an example using data from F. Hmm….\nWhat happened? This is fairly cool.\nOr functions of the data, like returns."
  },
  {
    "objectID": "posts/parameterized-rmd/TQ-Parameters.html#adding-some-interactives",
    "href": "posts/parameterized-rmd/TQ-Parameters.html#adding-some-interactives",
    "title": "Visualizing Equities with knitr Parameters",
    "section": "Adding Some Interactives",
    "text": "Adding Some Interactives\nThe following are a few quick interactive plots.\n\n\nCode\nlibrary(tidyquant)\nlibrary(tidyverse)\nlibrary(magrittr)\n# Use tidyquant to get the data\n# Slice off the most recent 120 days\ndat.tail <- tail(dat, 120)\ndat.tail %<>% mutate(\n    open = round(open, digits=2),\n    close = round(close, digits=2),\n    high = round(high, digits=2),\n    low = round(low, digits=2),\n    adjusted = round(adjusted, digits=2)\n    )\n\n\nLet’s have a look at the data.\n\n\nCode\nlibrary(DT)\ndatatable(dat.tail)"
  },
  {
    "objectID": "posts/parameterized-rmd/TQ-Parameters.html#the-plot",
    "href": "posts/parameterized-rmd/TQ-Parameters.html#the-plot",
    "title": "Visualizing Equities with knitr Parameters",
    "section": "The Plot",
    "text": "The Plot\nThere are a few charts specifically designed for OHLC data that are included in plotly. Here I want to deploy a basic one with one modification. I want daily increases in black and daily decreases in red.\n\n\nCode\nlibrary(plotly)\n# basic example of ohlc charts\n# custom colors\ni <- list(line = list(color = '#000000')) # black\nd <- list(line = list(color = '#FF0000')) # red\n# Create the figure\nfig.2 <- dat.tail %>%\n  plot_ly(x = ~date, type=\"ohlc\",\n          open = ~open, close = ~close,\n          high = ~high, low = ~low,\n          increasing = i, decreasing = d)\nfig.2"
  },
  {
    "objectID": "reports.html",
    "href": "reports.html",
    "title": "Stock Reports",
    "section": "",
    "text": "No matching items"
  }
]